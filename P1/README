This README describes how to run the tests for P1. It should be simple;

List of Testing Scripts:
~cs537-1/tests/P1/runtests

For example, to test your implementation of MADCounter, just type:

prompt> ~cs537-1/tests/P1/runtests

This will run the tests for MADCounter. If it works well, it should look like this:

prompt>$ ~cs537-1/tests/P1/runtests -c
MADCOUNTER...
TEST 0 - clean build (program should compile without errors or warnings)
RESULT passed

TEST 1 - No arguments - should exit returning 1 and print usage message
RESULT passed

TEST 2 - No Input File Provided - -f not specificed, should exit returning 1 and print error message
RESULT passed

TEST 3 - No Input File Provided - -f specificed but isn't followed by a file name, should exit returning 1 and print error message
RESULT passed

TEST 4 - Input File Provided Can't be Opened - should exit returning 1 and print error message
RESULT passed

TEST 5 - No file provide after -o - should exit returning 1 and print error message
RESULT passed

TEST 6 - File provide after -f is empty - should exit returning 1 and print error message
RESULT passed

TEST 7 - Invalid Flag - should exit returning 1 and print error message
RESULT passed

TEST 8 - Multiple Possible Errors - No file provide after -o shoudl take priority over input file being empty - should exit returning 1 and print error message
RESULT passed

TEST 9 - Correct char analysis - should perform character analysis and print to STDOUT returning 0
RESULT passed

TEST 10 - Correct word analysis - should perform word analysis and print to STDOUT returning 0
RESULT passed

TEST 11 - Correct longest word analysis w/ one longest word- should perform longest word analysis and print to STDOUT returning 0
RESULT passed

TEST 12 - Correct longest word analysis w/ multiple longest words- should perform longest word analysis and print to STDOUT returning 0
RESULT passed

TEST 13 - Correct line analysis - should perform line analysis and print to STDOUT returning 0
RESULT passed

TEST 14 - Correct lngest line analysis w/ single longest line- should perform longest line analysis and print to STDOUT returning 0
RESULT passed

TEST 15 - Correct lngest line analysis w/ multiple longest lines- should perform longest line analysis and print to STDOUT returning 0
RESULT passed

TEST 16 - Correct all analysis types to STDOUT- should perform all analysis and print to STDOUT returning 0
RESULT passed

TEST 17 - Correct all analysis types to output file- should perform all analysis and print to output file returning 0
RESULT passed

TEST 18 - Correct all analysis types to output file- should perform all analysis and print to output file returning 0
RESULT passed

TEST 19 - Correct all analysis types to output file- should perform all analysis and print to output file returning 0
RESULT passed

TEST 20 - Batch File Provided Can't be Opened - should exit returning 1 and print error message
RESULT passed

TEST 21 - Batch File Provided is Empty - should exit returning 1 and print error message
RESULT passed

TEST 22 - Correct batch mode w/Single line- should perform all analysis and print to output file returning 0
RESULT passed

TEST 23 - Correct batch mode w/Single line- should perform all analysis and print to STDOUT returning 0
RESULT passed

TEST 24 - Correct batch mode w/Multiple line- should perform all analysis and print to output file returning 0
RESULT passed

TEST 25 - Correct batch mode w/Multiple line- should perform all analysis and print to STDOUT returning 0
RESULT passed

TEST 26 - Correct batch mode w/Multiple line for different input files- should perform all analysis and print to output file returning 0
RESULT passed

TEST 27 - Correct batch mode w/Multiple line for different input files- should perform all analysis and print to STDOUT returning 0
RESULT passed

TEST 28 - Large Output File- should perform all analysis and print to output file returning 0
RESULT passed

TEST 29 - Batch mode w/errors- Should print errors and perform all analysis on lines with errors and print to STDOUT returning 0
RESULT passed

TEST 30 - Correct batch mode w/Multiple line- should perform all analysis and print to STDOUT returning 0
RESULT passed

TEST SCORE: 30

prompt> 


Unfortunately, sometimes a test won't pass. Here's an example of this:

prompt> $ ~cs537-1/tests/P1/runtests
MADCOUNTER...
TEST 0 - clean build (program should compile without errors or warnings)
RESULT passed

TEST 1 - No arguments - should exit returning 1 and print usage message
RESULT failed
standard output does not match expected
expected: [USAGE:
	./MADCounter -f <input file> -o <output file> -c -w -l -Lw -Ll
		OR
	./MADCounter -B <batch file>
]
got:      [Wrong Usage
]


TESTING HALTED (use -c or --continue to keep going if you like)
prompt>

As you can see in the test, this version of MADCounter didn't include
the right usage message, so it didn't match what was expected. The result
is that the testing is halted, and an error is reported. You can
optionally run all the tests (despite the failure) by adding the -c flag
on the command line.

When you run into a problem, you may wish to run a test "by hand" in order
to debug your code. To do this, one particularly handy flag is the "-v" flag,
which tells you specifically which command was run to do the test. For
example, to get more info about the MADCounter tests, you would type:

prompt> $ ~cs537-1/tests/P1/runtests -v
MADCOUNTER...
TEST 0 - clean build (program should compile without errors or warnings)
COMMAND gcc MADCounter.c -o MADCounter -Wall -Werror 
RESULT passed

TEST 1 - No arguments - should exit returning 1 and print usage message
COMMAND ./MADCounter
RESULT passed

TEST 2 - No Input File Provided - -f not specificed, should exit returning 1 and print error message
COMMAND ./MADCounter -o out.txt -c
RESULT passed
...

As you can see, the COMMAND line tells you exactly what to run to run
a test by hand. 





